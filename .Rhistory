geom_line(aes(y = Diploma...Professional.Qualification, color = "Diploma & Professional Qualification", group = 1)) +
geom_line(aes(y = University, color = "University", group = 1)) +
labs(
title = "How does Education level affect Singlehood?\n(30-39 Years Old)",
x = "Year",
y = "% of Population, Single"
) +
scale_color_manual(values = setNames(love_colors, legend_order),
breaks = legend_order) +
theme_void() +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14),  # Adjust the size of the title text
plot.margin = margin(b = 40, t = 20),
axis.title.y = element_text(size = 10, angle = 90, margin = margin(r = 10)),  # Make y-axis label vertical
axis.title.x = element_text(size = 10, angle = 0, margin = margin(r = 10)),
axis.text = element_text(size = 10),  # Adjust the size of the axis text
legend.text = element_text(size = 7),  # Adjust the size of the legend text
legend.title = element_blank(),  # Remove legend title
legend.spacing.x = unit(0.1, 'cm')  # Adjust spacing between legend items
)
suppressMessages(library("tidyverse"))
clean_data <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data3.csv")
# Filter data for Secondary and University
filtered_data <- clean_data %>%
select(Year, Secondary, University)
# Define the order of legend labels
legend_order <- c("Secondary", "University")
# Create Plot of Education Level vs Singlehood
ggplot(filtered_data, aes(x = Year)) +
geom_line(aes(y = Secondary, color = "Secondary")) +
geom_line(aes(y = University, color = "University")) +
labs(
title = "How does Education level affect Singlehood?\n(30-39 Years Old)",  # Use a line break for the title
x = "Year",
y = "Singlehood (%)"
) +
scale_color_manual(values = c("Secondary" = "#E48397", "University" = "#5E081E"),
breaks = legend_order) +
scale_x_continuous(breaks = seq(2013, 2022, 1)) +  # Set breaks for the x-axis
theme_void() +  # Use theme_void() to remove both background grids and grid lines
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14),  # Adjust the size of the title text
plot.margin = margin(b = 40, t = 20),
axis.title.y = element_text(size = 12, angle = 90),  # Make y-axis label vertical
axis.title.x = element_text(size = 12, angle = 0),
axis.text = element_text(size = 10),  # Adjust the size of the axis text
legend.text = element_text(size = 8),  # Adjust the size of the legend text
legend.title = element_blank(),  # Remove legend title
legend.spacing.x = unit(0.1, 'cm')  # Adjust spacing between legend items
)
suppressMessages(library("tidyverse"))
clean_data <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data3.csv")
# Filter data for Secondary and University
filtered_data <- clean_data %>%
select(Year, Secondary, University)
# Define the order of legend labels
legend_order <- c("Secondary", "University")
# Create Plot of Education Level vs Singlehood
ggplot(filtered_data, aes(x = Year)) +
geom_line(aes(y = Secondary, color = "Secondary")) +
geom_line(aes(y = University, color = "University")) +
labs(
title = "How does Education level affect Singlehood?\n(30-39 Years Old)",  # Use a line break for the title
x = "Year",
y = "Singlehood (%)"
) +
scale_color_manual(values = c("Secondary" = "#E48397", "University" = "#5E081E"),
breaks = legend_order) +
scale_x_continuous(breaks = seq(2013, 2022, 1)) +  # Set breaks for the x-axis
theme_void() +  # Use theme_void() to remove both background grids and grid lines
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14),  # Adjust the size of the title text
plot.margin = margin(b = 40, t = 20),
axis.title.y = element_text(size = 12, angle = 90),  # Make y-axis label vertical
axis.title.x = element_text(size = 12, angle = 0),
axis.text = element_text(size = 10),  # Adjust the size of the axis text
legend.text = element_text(size = 8),  # Adjust the size of the legend text
legend.title = element_blank(),  # Remove legend title
legend.spacing.x = unit(0.1, 'cm')  # Adjust spacing between legend items
)
shiny::runApp('IanShinyApp')
runApp('IanShinyApp2')
runApp('IanShinyApp')
runApp('IanShinyApp2')
library(shiny)
library(ggplot2)
# Define UI
ui <- fluidPage(
titlePanel("Education Level vs Singlehood"),
sidebarLayout(
sidebarPanel(
selectInput("age_group", "Select Age Group", c("30-39", "40-49"))
),
mainPanel(
plotOutput("plot1")
)
)
)
# Define server
server <- function(input, output) {
# Function to generate plots
generate_plot <- function(data, age_group) {
ggplot(data, aes(x = Year)) +
geom_line(aes(y = Below.Secondary, color = "Below Secondary", group = 1)) +
geom_line(aes(y = Secondary, color = "Secondary", group = 1)) +
geom_line(aes(y = Post.Secondary..Non.Tertiary., color = "Post Secondary", group = 1)) +
geom_line(aes(y = Diploma...Professional.Qualification, color = "Diploma & Professional Qualification", group = 1)) +
geom_line(aes(y = University, color = "University", group = 1)) +
labs(
title = paste("How does Education level affect Singlehood?\n(", age_group, " Years Old)"),
x = "Year",
y = "% of Population, Single"
) +
scale_color_manual(values = setNames(love_colors, legend_order),
breaks = legend_order) +
theme_void() +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14),
plot.margin = margin(b = 40, t = 20),
axis.title.y = element_text(size = 10, angle = 90, margin = margin(r = 10)),
axis.title.x = element_text(size = 10, angle = 0, margin = margin(r = 10)),
axis.text = element_text(size = 10),
legend.text = element_text(size = 7),
legend.title = element_blank(),
legend.spacing.x = unit(0.1, 'cm')
)
}
# Render plot1
output$plot1 <- renderPlot({
age_group <- input$age_group
data <- switch(age_group,
"30-39" = clean_data3,
"40-49" = clean_data4)
generate_plot(data, age_group)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(ggplot2)
clean_data3 <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data3.csv")
clean_data4 <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data4.csv")
# Define UI
ui <- fluidPage(
titlePanel("Education Level vs Singlehood"),
sidebarLayout(
sidebarPanel(
selectInput("age_group", "Select Age Group", c("30-39", "40-49"))
),
mainPanel(
plotOutput("plot1")
)
)
)
# Define server
server <- function(input, output) {
# Function to generate plots
generate_plot <- function(data, age_group) {
ggplot(data, aes(x = Year)) +
geom_line(aes(y = Below.Secondary, color = "Below Secondary", group = 1)) +
geom_line(aes(y = Secondary, color = "Secondary", group = 1)) +
geom_line(aes(y = Post.Secondary..Non.Tertiary., color = "Post Secondary", group = 1)) +
geom_line(aes(y = Diploma...Professional.Qualification, color = "Diploma & Professional Qualification", group = 1)) +
geom_line(aes(y = University, color = "University", group = 1)) +
labs(
title = paste("How does Education level affect Singlehood?\n(", age_group, " Years Old)"),
x = "Year",
y = "% of Population, Single"
) +
scale_color_manual(values = setNames(love_colors, legend_order),
breaks = legend_order) +
theme_void() +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14),
plot.margin = margin(b = 40, t = 20),
axis.title.y = element_text(size = 10, angle = 90, margin = margin(r = 10)),
axis.title.x = element_text(size = 10, angle = 0, margin = margin(r = 10)),
axis.text = element_text(size = 10),
legend.text = element_text(size = 7),
legend.title = element_blank(),
legend.spacing.x = unit(0.1, 'cm')
)
}
# Render plot1
output$plot1 <- renderPlot({
age_group <- input$age_group
data <- switch(age_group,
"30-39" = clean_data3,
"40-49" = clean_data4)
generate_plot(data, age_group)
})
}
# Run the app
shinyApp(ui, server)
runApp('IanShinyApp2')
runApp('IanShinyApp2')
runApp('IanShinyApp2')
runApp('IanShinyApp2')
runApp('IanShinyApp2')
runApp('IanShinyApp2')
runApp('IanShinyApp2')
runApp('IanShinyApp')
runApp('IanShinyApp')
runApp('IanShinyApp')
runApp('IanShinyApp')
# Load libraries
library(shiny)
library(ggplot2)
# Read data
clean_data3 <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data3.csv")
clean_data4 <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data4.csv")
# Rename columns
colnames(clean_data3) <- c("Year", "Below_Secondary", "Secondary", "Post_Secondary", "Diploma_Professional_Qualification", "University")
colnames(clean_data4) <- c("Year", "Below_Secondary", "Secondary", "Post_Secondary", "Diploma_Professional_Qualification", "University")
# Define legend_order
legend_order <- c("Below_Secondary", "Secondary", "Post_Secondary", "Diploma_Professional_Qualification", "University")
# Love-themed color palette
love_colors <- c("#E4CDD3", "#E48397", "#E24767", "#B51A3A", "#5E081E")
# Define UI
ui <- fluidPage(
titlePanel("Education Level vs Singlehood"),
sidebarLayout(
sidebarPanel(
selectInput("age_group", "Select Age Group", c("30-39", "40-49")),
selectInput("education_type", "Select Education Type", legend_order)
),
mainPanel(
plotOutput("plot1")
)
)
)
# Define server
server <- function(input, output) {
# Function to generate plots
generate_plot <- function(data, age_group, education_type) {
ggplot(data, aes(x = Year)) +
geom_line(aes(y = get(education_type), color = education_type, group = 1)) +
labs(
title = paste("How does Education level affect Singlehood?\n(", age_group, " Years Old)"),
x = "Year",
y = "% of Population, Single"
) +
scale_x_continuous(breaks = seq(min(data$Year), max(data$Year), by = 1)) +  # Set breaks to whole numbers
scale_color_manual(values = setNames(love_colors, legend_order),
breaks = legend_order) +
theme_void() +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14),
plot.margin = margin(b = 40, t = 20),
axis.title.y = element_text(size = 10, angle = 90, margin = margin(r = 10)),
axis.title.x = element_text(size = 10, angle = 0, margin = margin(r = 10)),
axis.text = element_text(size = 10),
legend.text = element_text(size = 7),
legend.title = element_blank(),
legend.spacing.x = unit(0.1, 'cm')
)
}
# Render plot1
output$plot1 <- renderPlot({
age_group <- input$age_group
education_type <- input$education_type
data <- switch(age_group,
"30-39" = clean_data3,
"40-49" = clean_data4)
generate_plot(data, age_group, education_type)
})
}
# Run the app
shinyApp(ui, server)
# Load the ggplot2 library
suppressMessages(library(ggplot2))
# Read the CSV file into a data frame
data <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data5.csv")
# Rename columns for better compatibility
colnames(data) <- c("Year", "Single_30_39", "Non_Single_30_39")
# Reshape the data for better compatibility with ggplot2
library(tidyr)
data_long <- gather(data, key = "Status", value = "Percentage", -Year)
# Create a grouped bar graph using ggplot with specified colors
ggplot(data_long, aes(x = Year, y = Percentage, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Grouped Bar Graph of 30-39 Years", y = "Percentage", x = "Year") +
scale_fill_manual(values = c("Single" = "blue", "Non-Single" = "red")) +
scale_x_continuous(breaks = unique(data$Year), labels = unique(data$Year)) +
theme_minimal()
# Load the ggplot2 library
suppressMessages(library(ggplot2))
# Read the CSV file into a data frame
data <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data5.csv")
# Rename columns for better compatibility
colnames(data) <- c("Year", "Single_30_39", "Non_Single_30_39")
# Reshape the data for better compatibility with ggplot2
library(tidyr)
data_long <- gather(data, key = "Status", value = "Percentage", -Year)
# Create a grouped bar graph using ggplot with specified colors
ggplot(data_long, aes(x = Year, y = Percentage, fill = Status)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Grouped Bar Graph of 30-39 Years", y = "Percentage", x = "Year") +
scale_fill_manual(values = c("blue", "red")) +
scale_x_continuous(breaks = unique(data$Year), labels = unique(data$Year)) +
theme_minimal()
library(shiny)
library(ggplot2)
clean_data3 <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data3.csv")
clean_data4 <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data4.csv")
# Define legend_order
legend_order <- c("Below Secondary", "Secondary", "Post Secondary", "Diploma & Professional Qualification", "University")
# Love-themed color palette
love_colors <- c("#E4CDD3", "#E48397", "#E24767", "#B51A3A", "#5E081E")
# Define UI
ui <- fluidPage(
titlePanel("Education Level vs Singlehood"),
sidebarLayout(
sidebarPanel(
selectInput("age_group", "Select Age Group", c("30-39", "40-49"))
),
mainPanel(
plotOutput("plot1")
)
)
)
# Define server
server <- function(input, output) {
# Function to generate plots
generate_plot <- function(data, age_group) {
ggplot(data, aes(x = Year)) +
geom_line(aes(y = Below.Secondary, color = "Below Secondary", group = 1)) +
geom_line(aes(y = Secondary, color = "Secondary", group = 1)) +
geom_line(aes(y = Post.Secondary..Non.Tertiary., color = "Post Secondary", group = 1)) +
geom_line(aes(y = Diploma...Professional.Qualification, color = "Diploma & Professional Qualification", group = 1)) +
geom_line(aes(y = University, color = "University", group = 1)) +
labs(
title = paste("How does Education level affect Singlehood?\n(", age_group, " Years Old)"),
x = "Year",
y = "% of Population, Single"
) +
scale_x_continuous(breaks = seq(min(data$Year), max(data$Year), by = 1)) +  # Set breaks to whole numbers
scale_color_manual(values = setNames(love_colors, legend_order),
breaks = legend_order) +
theme_void() +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14),
plot.margin = margin(b = 40, t = 20),
axis.title.y = element_text(size = 10, angle = 90, margin = margin(r = 10)),
axis.title.x = element_text(size = 10, angle = 0, margin = margin(r = 10)),
axis.text = element_text(size = 10),
legend.text = element_text(size = 7),
legend.title = element_blank(),
legend.spacing.x = unit(0.1, 'cm')
)
}
# Render plot1
output$plot1 <- renderPlot({
age_group <- input$age_group
data <- switch(age_group,
"30-39" = clean_data3,
"40-49" = clean_data4)
generate_plot(data, age_group)
})
}
# Run the app
shinyApp(ui, server)
# Load libraries
library(shiny)
library(ggplot2)
setwd("~/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/IanShinyApp")
# Load libraries
library(shiny)
library(ggplot2)
# Read data
clean_data3 <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data3.csv")
clean_data4 <- read.csv("/Users/iannnlee/Documents/GitHub/iannnlee.github.io/iannnlee.github.io/clean_data4.csv")
# Rename columns
colnames(clean_data3) <- c("Year", "Below_Secondary", "Secondary", "Post_Secondary", "Diploma_Professional_Qualification", "University")
colnames(clean_data4) <- c("Year", "Below_Secondary", "Secondary", "Post_Secondary", "Diploma_Professional_Qualification", "University")
# Define legend_order
legend_order <- c("Below_Secondary", "Secondary", "Post_Secondary", "Diploma_Professional_Qualification", "University")
# Love-themed color palette
love_colors <- c("#E4CDD3", "#E48397", "#E24767", "#B51A3A", "#5E081E")
# Define UI
ui <- fluidPage(
titlePanel("Education Level vs Singlehood"),
sidebarLayout(
sidebarPanel(
selectInput("age_group", "Select Age Group", c("30-39", "40-49")),
selectInput("education_type", "Select Education Type", legend_order)
),
mainPanel(
plotOutput("plot1")
)
)
)
# Define server
server <- function(input, output) {
# Function to generate plots
generate_plot <- function(data, age_group, education_type) {
ggplot(data, aes(x = Year)) +
geom_line(aes(y = get(education_type), color = education_type, group = 1)) +
labs(
title = paste("How does Education level affect Singlehood?\n(", age_group, " Years Old)"),
x = "Year",
y = "% of Population, Single"
) +
scale_x_continuous(breaks = seq(min(data$Year), max(data$Year), by = 1)) +  # Set breaks to whole numbers
scale_color_manual(values = setNames(love_colors, legend_order),
breaks = legend_order) +
theme_void() +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14),
plot.margin = margin(b = 40, t = 20),
axis.title.y = element_text(size = 10, angle = 90, margin = margin(r = 10)),
axis.title.x = element_text(size = 10, angle = 0, margin = margin(r = 10)),
axis.text = element_text(size = 10),
legend.text = element_text(size = 7),
legend.title = element_blank(),
legend.spacing.x = unit(0.1, 'cm')
)
}
# Render plot1
output$plot1 <- renderPlot({
age_group <- input$age_group
education_type <- input$education_type
data <- switch(age_group,
"30-39" = clean_data3,
"40-49" = clean_data4)
generate_plot(data, age_group, education_type)
})
}
# Run the app
shinyApp(ui, server)
# Load libraries
library(shiny)
library(ggplot2)
# Read data
clean_data3 <- read.csv("/clean_data3.csv")
# Load libraries
library(shiny)
library(ggplot2)
# Read data
clean_data3 <- read.csv("clean_data3.csv")
clean_data4 <- read.csv("clean_data4.csv")
# Rename columns
colnames(clean_data3) <- c("Year", "Below_Secondary", "Secondary", "Post_Secondary", "Diploma_Professional_Qualification", "University")
colnames(clean_data4) <- c("Year", "Below_Secondary", "Secondary", "Post_Secondary", "Diploma_Professional_Qualification", "University")
# Define legend_order
legend_order <- c("Below_Secondary", "Secondary", "Post_Secondary", "Diploma_Professional_Qualification", "University")
# Love-themed color palette
love_colors <- c("#E4CDD3", "#E48397", "#E24767", "#B51A3A", "#5E081E")
# Define UI
ui <- fluidPage(
titlePanel("Education Level vs Singlehood"),
sidebarLayout(
sidebarPanel(
selectInput("age_group", "Select Age Group", c("30-39", "40-49")),
selectInput("education_type", "Select Education Type", legend_order)
),
mainPanel(
plotOutput("plot1")
)
)
)
# Define server
server <- function(input, output) {
# Function to generate plots
generate_plot <- function(data, age_group, education_type) {
ggplot(data, aes(x = Year)) +
geom_line(aes(y = get(education_type), color = education_type, group = 1)) +
labs(
title = paste("How does Education level affect Singlehood?\n(", age_group, " Years Old)"),
x = "Year",
y = "% of Population, Single"
) +
scale_x_continuous(breaks = seq(min(data$Year), max(data$Year), by = 1)) +  # Set breaks to whole numbers
scale_color_manual(values = setNames(love_colors, legend_order),
breaks = legend_order) +
theme_void() +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14),
plot.margin = margin(b = 40, t = 20),
axis.title.y = element_text(size = 10, angle = 90, margin = margin(r = 10)),
axis.title.x = element_text(size = 10, angle = 0, margin = margin(r = 10)),
axis.text = element_text(size = 10),
legend.text = element_text(size = 7),
legend.title = element_blank(),
legend.spacing.x = unit(0.1, 'cm')
)
}
# Render plot1
output$plot1 <- renderPlot({
age_group <- input$age_group
education_type <- input$education_type
data <- switch(age_group,
"30-39" = clean_data3,
"40-49" = clean_data4)
generate_plot(data, age_group, education_type)
})
}
# Run the app
shinyApp(ui, server)
runApp()
<a href="https://youtu.be/dQw4w9WgXcQ?si=_0YSLZLTdgtjPtOI" target="_blank">
<a href="https://youtu.be/dQw4w9WgXcQ?si=_0YSLZLTdgtjPtOI" target="_blank">
runApp()
